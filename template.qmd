---
title: "Lab 7: Parking Garage Case Study"
author: "Jonathan Gan wg18"
jupyter: julia-1.10
date: 2024-03-08
categories: [Lab]

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #`    code-line-numbers: true

date-format: "ddd., MMM. D"
references: references.bib
---

# Load Packages
```{julia}
using Revise
using ParkingGarage
```
```{julia}
using Plots
Plots.default(; margin=5Plots.mm)
```


# Static Deterministic Case
```{julia}
let
    sow = ParkingGarageSOW(; demand_growth_rate=80.0, n_years=20, discount_rate=0.12)
    n_levels = 2:12
    policies = [StaticPolicy(i) for i in n_levels]
    profits = [simulate(sow, policy) for policy in policies]
    plot(
        n_levels,
        profits;
        ylabel="NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="$(sow.n_years) Year Horizon, $(sow.discount_rate) Discount, $(sow.demand_growth_rate) Demand Growth",
        size=(800, 400),
        marker=:circle,
        xticks=n_levels,
    )
    hline!([0])
end
```

# Static Stochastic Case
```{julia}
let
    n_years = 20
    discount_rate = 0.12
    sow1 = ParkingGarageSOW(; demand_growth_rate=70.0, n_years, discount_rate)
    n_levels = 2:12
    policies = [StaticPolicy(i) for i in n_levels]
    profits1 = [simulate(sow1, policy) for policy in policies]

    sow2 = ParkingGarageSOW(; demand_growth_rate=80.0, n_years, discount_rate)
    profits2 = [simulate(sow2, policy) for policy in policies]

    sow3 = ParkingGarageSOW(; demand_growth_rate=90.0, n_years, discount_rate)
    profits3 = [simulate(sow3, policy) for policy in policies]

    profits_mean = [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]
    for i in 1:length(profits1)
        profits_mean[i]= (profits1[i] + profits2[i] +profits3[i]) / 3
    end
    
    profits_mean_plot = transpose(profits_mean)
     plot(
        n_levels,
        profits_mean_plot;
        ylabel="Mean NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="20 Year Horizon, 12% Discount, Average of 70, 80, and 90% Demand Growth",
        size=(800, 400),
        marker=:circle,
        xticks=n_levels,
    )
    hline!([0])
end
```

# Adaptive Deterministic Case
```{julia}
let
    sow = ParkingGarageSOW(; demand_growth_rate=80.0, n_years=20, discount_rate=0.12)
    n_levels = 2:12
    policies = [AdaptivePolicy(i) for i in n_levels]
    profits = [simulate(sow, policy) for policy in policies]
    plot(
        n_levels,
        profits;
        ylabel="NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="$(sow.n_years) Year Horizon, $(sow.discount_rate) Discount, $(sow.demand_growth_rate) Demand Growth",
        size=(800, 400),
        marker=:circle,
        xticks=n_levels,
    )
    hline!([0])
end

```

# Adaptive Stochastic Case
```{julia}


```

      

     